buildscript {
    ext.kotlin_version = '1.1.51'
    repositories {
        jcenter()
        mavenCentral()

        maven {
            url "${artifactory_contextUrl}/libs-release-local"
            credentials {
                username = "${artifactory_username}"
                password = "${artifactory_password}"
            }
        }
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.5.8.RELEASE'
        classpath 'org.springframework:springloaded:1.2.8.RELEASE'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'com.github.ben-manes.versions' version '0.15.0'
    id 'nu.studer.jooq' version '2.0.9'
}

group 'com.github.zdix'
version '1.0'

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'org.springframework.boot'
apply plugin: 'idea'
// apply plugin: 'war'
apply plugin: 'maven-publish'
apply plugin: "com.jfrog.artifactory"
apply plugin: 'nu.studer.jooq'
apply plugin: 'org.junit.platform.gradle.plugin'

sourceCompatibility = 1.8

jar {
    baseName = 'app'
    version =  ''
}

bootRepackage.withJarTask = jar

repositories {
    mavenCentral()
    jcenter()
}

configurations {
    providedRuntime
}

dependencies {
    compile 'mysql:mysql-connector-java:5.1.44'
    compile 'com.google.code.gson:gson:2.8.2'
    compile 'org.apache.tomcat:tomcat-jdbc:9.0.1'
    compile 'com.google.guava:guava:23.2-jre'
    compile 'org.apache.commons:commons-lang3:3.6'
    compile 'redis.clients:jedis:2.9.0'
    compile 'org.jooq:jooq:3.10.1'

    compile group: 'org.mybatis.generator', name: 'mybatis-generator', version: '1.3.5', ext: 'pom'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.11'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile group: 'org.apache.commons', name: 'commons-email', version: '1.5'
    compile group: 'com.jayway.jsonpath', name: 'json-path', version: '2.4.0'


    compile 'org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.1'
    compile 'org.springframework.boot:spring-boot-starter-web:1.5.8.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-freemarker:1.5.8.RELEASE'

    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat:1.5.8.RELEASE")
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"

    testCompile("org.junit.jupiter:junit-jupiter-api:5.0.1")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.0.1")
}

task publishBaseJar(type: Jar) {
    // classifier = 'base'
    from sourceSets.main.output
    exclude 'com/dix/app/**'
    exclude 'web/**'
    exclude 'application.properties'
    exclude 'mybatis/**'
    exclude 'mybatis-config.xml'
    exclude 'hibernate.cfg.xml'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            // from components.java

            groupId 'com.dix.base'
            artifactId 'core'
            version '0.0.52'

            artifact publishBaseJar

            pom.withXml { xmlFile ->
                def root = xmlFile.asNode()
                // root.remove(root["dependencyManagement"])
                def dependenciesNode = root.appendNode('dependencies')
                // def dependenciesNode = asNode().getAt("dependencyManagement")[0].getAt("dependencies")[0]
                configurations.compile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
}

artifactory {
    contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
    publish {
        repository {
            repoKey = 'gradle-release-local'
            username = "${artifactory_username}"
            password = "${artifactory_password}"
            maven = true
        }
        defaults {
            // Reference to Gradle publications defined in the build script.
            // This is how we tell the Artifactory Plugin which artifacts should be
            // published to Artifactory.
            publications('mavenJava')
            publishArtifacts = true
            // Properties to be attached to the published artifacts.
            properties = ['qa.level': 'basic', 'dev.team' : 'core']
            // Publish generated POM files to Artifactory (true by default)
            publishPom = true
        }
    }
    resolve {
        repository {
            repoKey = 'gradle-release'
            username = "${artifactory_username}"
            password = "${artifactory_password}"
            maven = true
        }
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

//jooq {
//    version = '3.9.2'
//    edition = 'OSS'
//    dd(sourceSets.main) {
//        jdbc {
//            driver = 'com.mysql.jdbc.Driver'
//            url = 'jdbc:mysql://localhost/'
//            schema = 'dix'
//            user = 'root'
//            password = '7'
//        }
//        generator {
//            database {
//            }
//            generate {
//                tables = true
//                records = false
//                pojos = true
//            }
//            target {
//                packageName = 'com.dix.app.jooq'
//                directory = 'src/main/java'
//            }
//        }
//    }
//}